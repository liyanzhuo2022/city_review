# ops/nginx/conf/conf.d/hmdp.local.conf

# 上游后端：你的 Spring Boot 在本机 18080
upstream backend {
    server 127.0.0.1:18080 max_fails=5 fail_timeout=10s weight=1;
    # 如有第二个实例可在此追加一行：
    server 127.0.0.1:18082 max_fails=5 fail_timeout=10s weight=1;
}

server {
    # 为避免与后端 18080 冲突，这里用 18081（可自行改成别的空闲端口）
    listen       18081;
    server_name  localhost;

    # 前端静态资源（相对 -p 指定的根目录）
    root   html/hmdp;
    index  index.html index.htm;

    # ---- 基础安全头（可保留，面试友好）----
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
    add_header Referrer-Policy no-referrer-when-downgrade always;

    # 静态资源缓存（开发期可调小或注释）
    location ~* \.(js|css|png|jpg|jpeg|gif|svg|ico|woff2?)$ {
        access_log off;
        expires 1h;
        add_header Cache-Control "public, max-age=3600";
        try_files $uri =404;
    }

    # SPA 路由：刷新不 404
    location / {
        try_files $uri /index.html;
    }

    # ------- /api 反向代理到后端（保留教程里的重写与 keepalive） -------
    location /api {
        # 仅对 API 指定 json 默认类型，静态资源仍由 mime.types 决定
        default_type  application/json;

        # keep-alive
        keepalive_timeout   30s;
        keepalive_requests  1000;
        proxy_http_version  1.1;

        # 去掉 /api 前缀再转发给后端
        rewrite /api(/.*) $1 break;

        # 透传请求头
        proxy_pass_request_headers on;

        # 失败重试策略
        proxy_next_upstream error timeout;

        # 反代到上面的 upstream（或直接 http://127.0.0.1:18080）
        proxy_pass http://backend;

        # 常见透传头
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;

        # 超时（可按需调整）
        proxy_connect_timeout 5s;
        proxy_send_timeout    60s;
        proxy_read_timeout    60s;

        # 如需本地跨域联调（仅开发期），取消以下注释
        # add_header Access-Control-Allow-Origin  *;
        # add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS";
        # add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
        # if ($request_method = OPTIONS) { return 204; }
    }

    # 可选：WebSocket 代理（如果有）
    location /ws/ {
        proxy_pass         http://backend;
        proxy_http_version 1.1;
        proxy_set_header   Upgrade           $http_upgrade;
        proxy_set_header   Connection        "upgrade";
        proxy_set_header   Host              $host;
        proxy_read_timeout 120s;
    }

    # 错误页（可保留默认示例）
    error_page 500 502 503 504 /50x.html;
    location = /50x.html { root html; }
}
